debug と Release

①Debugはデバッグ用の環境
②Releaseは配布用の環境

①は、遅い,デカい,相手先で動かない可能性がある
	Debugしやすいように余計なデータ及び余計なリンク
	そして非効率なアルゴリズム
	デバッグが動いてれば大抵Releaseも動く


②はクッソ早い、小さい、余計なものがない。
	大抵は相手先でも動く。
	ただし、デバッグし辛い。
	原因 : デバッグ情報がない。
		最適化がかかる->滅茶苦茶良い最適化
		実行の順番を変えたりする
		コンパイラが「不要」と判断した変数や関数を消す。
		ファイルの内容で次第で初めて呼ばれるような関数をたまに消す可能性がある
	volatile : 最適化から除外する
	Releaseの時にだけ発生するバグがある。



万が一Releaseだけでバグが起こったら
設定→右上から構成マネージャーで最適化をした上でデバッグ情報を残すものを作る

Debug/Releaseというのは、ビルドの設定をそれぞれにカスタマイズしたものに名前を付けたもの。
→自分で新しく作れます(例 : 最適化はかけるけどデバッグ情報を残す)

32bitマシンでは64bitアプリは動きません。
64bitマシンでは32bitアプリは動いています。
	64bitマシンは32bitアプリをエミュレートして動かしている

	だからゲームとかCGソフトは殆どが64bit
	ただし、Microsoftとしては過去との互換性を保ちたい。
	未だにビジネスでWin7(32bit)が使われていたりする
	このため、アプリを作るVisual Studio


sprintf
scanf
fread
memcpy
memset

↑メモリに書き込む系の関数
MS特有のセキュリティ意識で使えなくなる
バッファオーバーラン

sprintf_s(リミットサイズ)
scanf_s
fread_s
memcpy_s
memset_s
の関数を推奨しているが…
①MSでしか使えない
②対してセキュリティ対策にならない
